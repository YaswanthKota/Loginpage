{"version":3,"sources":["login.js","fire.js","hai.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","email","setEmail","password","setPassword","handleLogin","handleSignup","hasAccount","setHasAccount","emailError","passwordError","className","type","required","autoFocus","value","onChange","e","target","onClick","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Hero","handleLogout","user","console","log","App","useState","setUser","setEmailError","setPasswordError","clearErrors","authListener","auth","onAuthStateChanged","useEffect","signOut","signInWithEmailAndPassword","catch","err","code","message","createUserWithEmailAndPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"qQA8DeA,G,MA3DD,SAACC,GAAW,IAEtBC,EAUED,EAVFC,MACAC,EASEF,EATFE,SACAC,EAQEH,EARFG,SACAC,EAOEJ,EAPFI,YACAC,EAMEL,EANFK,YACAC,EAKEN,EALFM,aACAC,EAIEP,EAJFO,WACAC,EAGER,EAHFQ,cACAC,EAEET,EAFFS,WACAC,EACEV,EADFU,cAGF,OACE,6BAASC,UAAU,SACjB,yBAAKA,UAAU,kBACb,2CACA,2BACEC,KAAK,OACLC,UAAQ,EACRC,WAAS,EACTC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAASe,EAAEC,OAAOH,UAErC,uBAAGJ,UAAU,YAAYF,GACzB,2CACA,2BACEG,KAAK,WACLC,UAAQ,EACRE,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAYa,EAAEC,OAAOH,UAExC,uBAAGJ,UAAU,YAAYD,GACzB,yBAAKC,UAAU,gBACZJ,EACC,oCACE,4BAAQY,QAASd,GAAjB,WAEA,mDAEE,0BAAMc,QAAS,kBAAMX,GAAeD,KAApC,aAIJ,oCACE,4BAAQY,QAASb,GAAjB,WACA,gDAEE,0BAAMa,QAAS,kBAAMX,GAAeD,KAApC,kB,QCtCCa,E,OADFC,EAASC,cAXH,CACjBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCGJC,G,MAXH,SAAC,EAAD,GAA0B,IAAxBC,EAAuB,EAAvBA,aAAeC,EAAQ,EAARA,KACzB,OACI,6BAAStB,UAAU,QACf,6BACKuB,QAAQC,IAAI,CAACF,SACd,uCACA,4BAAQd,QAASa,GAAjB,cCiGDI,MAnGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNJ,EADM,KACAK,EADA,OAEaD,mBAAS,IAFtB,mBAENpC,EAFM,KAECC,EAFD,OAGmBmC,mBAAS,IAH5B,mBAGNlC,EAHM,KAGIC,EAHJ,OAIuBiC,mBAAS,IAJhC,mBAIN5B,EAJM,KAIM8B,EAJN,OAK6BF,mBAAS,IALtC,mBAKN3B,EALM,KAKS8B,EALT,OAMuBH,oBAAS,GANhC,mBAMN9B,EANM,KAMMC,EANN,KAaPiC,EAAc,WAClBF,EAAc,IACdC,EAAiB,KA2CbE,EAAe,WACnBtB,EAAKuB,OAAOC,oBAAmB,SAACX,GAC1BA,GAnDN/B,EAAS,IACTE,EAAY,IAoDRkC,EAAQL,IAGRK,EAAQ,QASd,OAJAO,qBAAU,WACRH,MACC,IAGD,yBAAK/B,UAAU,OACZsB,EACG,oCACG,kBAAC,EAAD,CAAMD,aAvBjB,WACEZ,EAAKuB,OAAOG,WAsB+Bb,KAAMA,KAG3C,kBAAC,EAAD,CACEhC,MAAOA,EACPC,SAAUA,EACVC,SAAUA,EACVC,YAAaA,EACbC,YApEU,WAClBoC,IACArB,EACGuB,OACAI,2BAA2B9C,EAAOE,GAClC6C,OAAM,SAACC,GACN,OAAQA,EAAIC,MACV,IAAK,qBACL,IAAK,qBACL,IAAK,sBACHX,EAAcU,EAAIE,SAClB,MACF,IAAK,sBACHX,EAAiBS,EAAIE,cAwDrB7C,aAlDW,WACnBmC,IACArB,EACGuB,OACAS,+BAA+BnD,EAAOE,GACtC6C,OAAM,SAACC,GACN,OAAQA,EAAIC,MACV,IAAK,4BACL,IAAK,qBACHX,EAAcU,EAAIE,SAClB,MACF,IAAK,qBACHX,EAAiBS,EAAIE,cAuCrB5C,WAAYA,EACZC,cAAeA,EACfC,WAAYA,EACZC,cAAeA,MCrFP2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnC,QAAQmC,MAAMA,EAAMlB,c","file":"static/js/main.39cb981f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './l.css'\r\n\r\nconst Login = (props) => {\r\n  const {\r\n    email,\r\n    setEmail,\r\n    password,\r\n    setPassword,\r\n    handleLogin,\r\n    handleSignup,\r\n    hasAccount,\r\n    setHasAccount,\r\n    emailError,\r\n    passwordError,\r\n  } = props;\r\n\r\n  return (\r\n    <section className=\"login\">\r\n      <div className=\"loginContainer\">\r\n        <label>Username</label>\r\n        <input\r\n          type=\"text\"\r\n          required\r\n          autoFocus\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <p className=\"errorMsg\">{emailError}</p>\r\n        <label>Password</label>\r\n        <input\r\n          type=\"password\"\r\n          required\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <p className=\"errorMsg\">{passwordError}</p>\r\n        <div className=\"btnContainer\">\r\n          {hasAccount ? (\r\n            <>\r\n              <button onClick={handleLogin}>Sign In</button>\r\n\r\n              <p>\r\n                Don't have a account?\r\n                <span onClick={() => setHasAccount(!hasAccount)}>Sign Up</span>\r\n              </p>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <button onClick={handleSignup}>Sign up</button>\r\n              <p>\r\n                Have and account ?\r\n                <span onClick={() => setHasAccount(!hasAccount)}>Sign in</span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBUzPaEVdJJyDmgbCnixNhjpx2TsBllO2Q\",\r\n    authDomain: \"login-page-fc387.firebaseapp.com\",\r\n    databaseURL: \"https://login-page-fc387.firebaseio.com\",\r\n    projectId: \"login-page-fc387\",\r\n    storageBucket: \"login-page-fc387.appspot.com\",\r\n    messagingSenderId: \"956054860775\",\r\n    appId: \"1:956054860775:web:8043b84f4928ba23a44342\",\r\n    measurementId: \"G-K55J4G5HRB\"\r\n  };\r\n  // Initialize Firebase\r\n  const fire = firebase.initializeApp(firebaseConfig);\r\n  export default fire","import React from 'react'\r\nimport './l.css'\r\nconst Hero =({handleLogout},{user})=>{\r\n    return(\r\n        <section className='Hero'>\r\n            <nav>\r\n                {console.log({user})}\r\n                <h1>Welcome</h1>\r\n                <button onClick={handleLogout}>Logout</button>\r\n            </nav>\r\n        </section>\r\n    )\r\n}\r\nexport default Hero","import React, { useState, useEffect } from \"react\";\nimport Login from \"./login\";\nimport fire from \"./fire\";\nimport \"./App.css\";\nimport Hero from './hai'\n\nfunction App() {\n  const [user, setUser] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false);\n\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n\n  const handleLogin = () => {\n    clearErrors();\n    fire\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/invalid-email\":\n          case \"auth/user-disabled\":\n          case \"auth/user-not-found\":\n            setEmailError(err.message);\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      });\n  };\n\n  const handleSignup = () => {\n    clearErrors();\n    fire\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .catch((err) => {\n        switch (err.code) {\n          case \"auth/email-already-in-use\":\n          case \"auth/invalid-email\":\n            setEmailError(err.message);\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      });\n  };\n\n  function handleLogOut() {\n    fire.auth().signOut();\n  }\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        clearInputs()\n        setUser(user);\n        }\n            else {\n        setUser(\"\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {user ? (\n          <>\n             <Hero handleLogout={handleLogOut} user={user}/>\n          </>\n        ) : (\n          <Login\n            email={email}\n            setEmail={setEmail}\n            password={password}\n            setPassword={setPassword}\n            handleLogin={handleLogin}\n            handleSignup={handleSignup}\n            hasAccount={hasAccount}\n            setHasAccount={setHasAccount}\n            emailError={emailError}\n            passwordError={passwordError}\n          />\n        )}\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}